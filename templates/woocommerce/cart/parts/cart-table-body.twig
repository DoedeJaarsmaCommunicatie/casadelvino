<tbody>
{% do action('woocommerce_before_cart_contents') %}
{% for key, item in cart %}
    {% set _product = item['data']|apply_filters('woocommerce_cart_item_product', item['data'], item, key) %}
    {% set id = item['data']|apply_filters('woocommerce_cart_item_product_id', item['product_id'], item, key) %}

    {% if _product and _product.exists and item['quantity'] > 0 %}
        {% set _permalink = _product.get_permalink %}
        <tr>
            {% include 'templates/woocommerce/cart/parts/table/product-remove.twig' %}
            {% include 'templates/woocommerce/cart/parts/table/product-thumbnail.twig' %}
            {% include 'templates/woocommerce/cart/parts/table/product-name.twig' %}
            {% include 'templates/woocommerce/cart/parts/table/product-price.twig' %}
            {% include 'templates/woocommerce/cart/parts/table/product-quantity.twig' %}
            {% include 'templates/woocommerce/cart/parts/table/product-subtotal.twig' %}
        </tr>
    {% endif %}
{% endfor %}
{% do action('woocommerce_cart_contents') %}
<tr>
    <td colspan="6" class="actions">
        {% if fn('wc_coupons_enabled') %}
            <div class="coupon">
                <label for="coupon_code">{{ __('Coupon:', 'woocommerce') }}</label>
                <input type="text" name="coupon_code" class="input-text" id="coupon_code" value="" placeholder="{{ __('Coupon code', 'woocommerce') }}" />
                <button type="submit" class="button" name="apply_coupon" value="{{ __('Apply coupon', 'woocommerce') }}">
                    {{ __('Apply coupon', 'woocommerce') }}
                </button>
                {% do action('woocommerce_cart_coupon') %}
            </div>
        {% endif %}

        <button type="submit" class="button d-none update-cart" name="update_cart" value="{{ __('Update cart', 'woocommerce') }}">
            {{ __('Update cart', 'woocommerce') }}
        </button>

        {% do action('woocommerce_cart_actions') %}
        {{ fn('wp_nonce_field', 'woocommerce-cart', 'woocommerce-cart-nonce') }}
    </td>
</tr>

{% do action('woocommerce_after_cart_contents') %}
</tbody>
<script>
  jQuery(document).ready(function($){

    wacChange = function(el_qty) {

      // ask user if they really want to remove this product
      if ( !wacZeroQuantityCheck(el_qty) ) {
        return false;
      }

      // when qty is set to zero, then fires default woocommerce remove link
      if ( el_qty.val() == 0 ) {
        removeLink = el_qty.closest('.cart_item').find('.product-remove a');
        removeLink.trigger('click');

        return false;
      }

      // deal with update cart button
      updateButton = $("button[name='update_cart'],input[name='update_cart']");
      updateButton.removeAttr('disabled')
        .trigger('click')
        .val( wooajaxcart.updating_text )
        .prop('disabled', true);

      // change the Update cart button
      $("a.checkout-button.wc-forward").addClass('disabled')
        .html( wooajaxcart.updating_text );

      return true;
    };

    wacPostCallback = function(resp) {
      // ajax response
      $('.cart-collaterals').html(resp.html);

      el_qty.closest('.cart_item').find('.product-subtotal').html(resp.price);

      $('#update_cart').remove();
      $('#is_wac_ajax').remove();
      $('#cart_item_key').remove();

      $("button[name='update_cart'],input[name='update_cart']").val(resp.update_label).prop('disabled', false);

      $("a.checkout-button.wc-forward").removeClass('disabled').html(resp.checkout_label);

      // when changes to 0, remove the product from cart
      if ( el_qty.val() == 0 ) {
        el_qty.closest('tr.cart_item').remove();
      }

      // hide or show the "+" button based on max stock limit (snippet based on @evtihii idea)
      maxStock = el_qty.attr('max');
      if ( maxStock > 0 ) {
        incrementButton = el_qty.parent().find('.wac-btn-inc').parent().parent();

        exceded = ( parseInt( el_qty.val() ) >= parseInt( maxStock ) );
        exceded ? incrementButton.hide() : incrementButton.show();
      }

      // fix to update "Your order" totals when cart is inside Checkout page (thanks @vritzka)
      if ( $( '.woocommerce-checkout' ).length ) {
        $( document.body ).trigger( 'update_checkout' );
      }

      $( document.body ).trigger( 'updated_cart_totals' );
      $( document.body ).trigger( 'wc_fragment_refresh' );
    };

    // overrided by wac-js-calls.php
    wacZeroQuantityCheck = function(el_qty) {
      if ( el_qty.val() == 0 ) {

        if ( !confirm(wooajaxcart.warn_remove_text) ) {
          el_qty.val(1);
          return false;
        }
      }

      return true;
    };

    wacListenQtyChange = function() {
      $(".qty").unbind('change.wooajaxcart').on('change.wooajaxcart', function(e) {

        // prevent to set invalid quantity on select
        if ( $(this).is('select') && ( $(this).attr('max') > 0 ) && ( $(this).val() > $(this).attr('max') ) ) {
          $(this).val( $(this).attr('max') );

          e.preventDefault();
          return false;
        }

        return wacChange( $(this) );
      });
    };

    wacListenQtyButtons = function() {
      $('.wac-btn-inc').unbind('click').bind('click', function(e){
        inputQty = $(this).parent().parent().parent().find('.qty');
        inputQty.val( function(i, oldval) { return ++oldval; });
        inputQty.trigger('change');
        return false;
      });

      $('.wac-btn-sub').unbind('click').bind('click', function(e){
        inputQty = $(this).parent().parent().parent().find('.qty');
        inputQty.val( function(i, oldval) { return oldval > 0 ? --oldval : 0; });
        inputQty.trigger('change');
        return false;
      });
    };

    wacListenEvents = function() {
      wacListenQtyChange();
      wacListenQtyButtons();
    };

    // listen when ajax cart has updated
    $(document).on('updated_wc_div', function(){
      wacListenEvents();
    });

    // onload calls
    wacListenEvents();
  });


</script>
